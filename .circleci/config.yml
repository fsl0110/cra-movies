version: 2.1

executors:
  app-executor:
    docker:
      - image: cimg/node:16.3.0
    working_directory: ~/project

aliases:
  - &show-current-branch-name
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
    restore_cache:
      name: Restore Package Cache
      keys:
        - npm-packages-v1-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}
        - npm-packages-v1-{{ arch }}-{{ .Branch }}
        - npm-packages-v1-
  - &install-dependencies
    run:
      name: Install Dependencies
      command: npm install
  - &save-cache
    save_cache:
      name: Save Package Cache
      key: npm-packages-v1-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}
      paths:
        - node_modules
  - &install-aws-cli
    run:
      name: Installing AWS CLI
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
  - &build-project
    run:
      name: Build Project
      command: |
        npm install
        npm run build
        cd build
        zip ../build.zip -r * .[^.]*
        echo "Build completed"

jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - run: node -v
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache
  linting:
    executor: app-executor
    steps:
      - checkout
      - run: node -v
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run ESLint check
          command: npm run lint:check
  prettier:
    executor: app-executor
    steps:
      - checkout
      - run: node -v
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run Prettier check
          command: npm run format:check
  jest:
    executor: app-executor
    steps:
      - checkout
      - run: node -v
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run Jest tests
          command: npm run test
  deploy-to-s3:
    executor: app-executor
    steps:
      - checkout
      - run: node -v
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS S3
          command: |
            if [ "${CIRCLE_BRANCH}" == "production"]
            then 
              aws --region ${AWS_REGION} s3 sync ~/project/build s3://${AWS_BUCKET_PRODUCTION} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging"]
            then 
              aws --region ${AWS_REGION} s3 sync ~/project/build s3://${AWS_BUCKET_STAGING} --delete
            else 
              aws --region ${AWS_REGION} s3 sync ~/project/build s3://${AWS_BUCKET_DEVELOPMENT} --delete
            fi

  deploy-to-cloudfront:
    executor: app-executor
    steps:
      - checkout
      - run: node -v
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS CloudFront
          command: |
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "production"]
            then 
              aws cloudfront create-invalidation --distribution-id ${DISTRIBUTION_ID_PRODUCTION} --paths /\*
            elif [ "${CIRCLE_BRANCH}" == "staging"]
            then 
              aws cloudfront create-invalidation --distribution-id ${DISTRIBUTION_ID_STAGING} --paths /\*
            else 
              aws cloudfront create-invalidation --distribution-id ${DISTRIBUTION_ID_DEVELOPMENT} --paths /\*
            fi

workflows:
  build_and_deploy:
    jobs:
      - build
      - linting:
          requires:
            - build
          filters:
            branches:
              only:
                - development
                - staging
                - production
      - prettier:
          requires:
            - build
          filters:
            branches:
              only:
                - development
                - staging
                - production
      - jest:
          requires:
            - linting
            - prettier
          filters:
            branches:
              only:
                - development
                - staging
                - production
      - deploy-to-s3:
          requires:
            - prettier
          filters:
            branches:
              only:
                - development
                - staging
                - production
      - deploy-to-cloudfront:
          requires:
            - deploy-to-s3
          filters:
            branches:
              only:
                - development
                - staging
                - production
